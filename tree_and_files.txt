Directory Structure:
.
├── Dockerfile
├── README.md
├── backend
│   ├── config
│   │   └── db.js
│   ├── controllers
│   │   ├── orderController.js
│   │   ├── productController.js
│   │   └── userController.js
│   ├── data
│   │   ├── products.js
│   │   └── users.js
│   ├── middleware
│   │   ├── asyncHandler.js
│   │   ├── authMiddleware.js
│   │   ├── checkObjectId.js
│   │   └── errorMiddleware.js
│   ├── models
│   │   ├── orderModel.js
│   │   ├── productModel.js
│   │   └── userModel.js
│   ├── routes
│   │   ├── orderRoutes.js
│   │   ├── productRoutes.js
│   │   ├── uploadRoutes.js
│   │   └── userRoutes.js
│   ├── seeder.js
│   ├── server.js
│   └── utils
│       ├── calcPrices.js
│       ├── generateToken.js
│       └── paypal.js
├── frontend
│   ├── Dockerfile
│   ├── README.md
│   ├── package-lock.json
│   ├── package.json
│   ├── public
│   │   ├── favicon.ico
│   │   ├── images
│   │   │   ├── airpods.jpg
│   │   │   ├── alexa.jpg
│   │   │   ├── camera.jpg
│   │   │   ├── mouse.jpg
│   │   │   ├── phone.jpg
│   │   │   ├── playstation.jpg
│   │   │   ├── sample.jpg
│   │   │   └── screens.png
│   │   ├── index.html
│   │   ├── logo192.png
│   │   ├── logo512.png
│   │   ├── manifest.json
│   │   └── robots.txt
│   └── src
│       ├── App.js
│       ├── assets
│       │   ├── logo.png
│       │   └── styles
│       │       ├── bootstrap.custom.css
│       │       └── index.css
│       ├── components
│       │   ├── AdminRoute.jsx
│       │   ├── CheckoutSteps.jsx
│       │   ├── Footer.jsx
│       │   ├── FormContainer.jsx
│       │   ├── Header.jsx
│       │   ├── Loader.jsx
│       │   ├── Message.jsx
│       │   ├── Meta.jsx
│       │   ├── Paginate.jsx
│       │   ├── PrivateRoute.jsx
│       │   ├── Product.jsx
│       │   ├── ProductCarousel.jsx
│       │   ├── Rating.jsx
│       │   └── SearchBox.jsx
│       ├── constants.js
│       ├── index.js
│       ├── reportWebVitals.js
│       ├── screens
│       │   ├── CartScreen.jsx
│       │   ├── HomeScreen.jsx
│       │   ├── LoginScreen.jsx
│       │   ├── OrderScreen.jsx
│       │   ├── PaymentScreen.jsx
│       │   ├── PlaceOrderScreen.jsx
│       │   ├── ProductScreen.jsx
│       │   ├── ProfileScreen.jsx
│       │   ├── RegisterScreen.jsx
│       │   ├── ShippingScreen.jsx
│       │   └── admin
│       │       ├── OrderListScreen.jsx
│       │       ├── ProductEditScreen.jsx
│       │       ├── ProductListScreen.jsx
│       │       ├── UserEditScreen.jsx
│       │       └── UserListScreen.jsx
│       ├── setupTests.js
│       ├── slices
│       │   ├── apiSlice.js
│       │   ├── authSlice.js
│       │   ├── cartSlice.js
│       │   ├── ordersApiSlice.js
│       │   ├── productsApiSlice.js
│       │   └── usersApiSlice.js
│       ├── store.js
│       └── utils
│           └── cartUtils.js
├── helm-chart
│   ├── Chart.yaml
│   ├── templates
│   │   ├── deployment.yaml
│   │   ├── ingress.yaml
│   │   └── secret-provisioner.yaml
│   └── values
│       ├── backend
│       │   ├── dev-values.yaml
│       │   ├── prod-values.yaml
│       │   └── staging-values.yaml
│       └── frontend
│           ├── dev-values.yaml
│           ├── prod-values.yaml
│           └── staging-values.yaml
├── package-lock.json
├── package.json
├── pnpm-lock.yaml
├── static
│   └── documentdb_connection.png
├── tree_and_files.txt
└── uploads

27 directories, 102 files

.github/workflows/cicd.yaml
Contents of .github/workflows/cicd.yaml:
#resolved but have error : 

# Backend - Build, tag, and push docker image to Amazon ECR

# 10 naming to 036692858685.dkr.ecr.us-east-1.amazonaws.com/proshop-backend:10c695d5f7e667802254f8511a742c52380ccf1d done
# 10 DONE 5.9s
# The push refers to repository [036692858685.dkr.ecr.us-east-1.amazonaws.com/proshop-backend]
# a59f8edde95e: Preparing
# a6966e7266fc: Preparing
# cc869e60d0bb: Preparing
# dfa25be46153: Preparing
# be322b479aee: Preparing
# d41bcd3a037b: Preparing
# fe0d845e767b: Preparing
# f25ec1d93a58: Preparing
# 794ce8b1b516: Preparing
# 3220beed9b06: Preparing
# 684f82921421: Preparing
# 9af5f53e8f62: Preparing
# fe0d845e767b: Waiting
# f25ec1d93a58: Waiting
# 794ce8b1b516: Waiting
# 3220beed9b06: Waiting
# 684f82921421: Waiting
# 9af5f53e8f62: Waiting
# d41bcd3a037b: Waiting
# name unknown: The repository with name 'proshop-backend' does not exist in the registry with id '036692858685'
# Error: Process completed with exit code 1.

name: proshop app Image CI

on:
  push:
    branches:
      - feature/**

# required permissions by GitHub Actions for assuming AWS IAM role
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: "us-east-1"

jobs:
  proshop-app-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3

      - name: Set Environment Stage
        id: set-env-stage
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then echo "ENVIRONMENT_STAGE=production" >> $GITHUB_ENV; elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then echo "ENVIRONMENT_STAGE=staging" >> $GITHUB_ENV; else echo "ENVIRONMENT_STAGE=dev" >> $GITHUB_ENV; fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::036692858685:role/GitHubActionsCICDroleVSS
          role-session-name: GitHubActionsCICDrole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Backend - Build, tag, and push docker image to Amazon ECR
        if: github.ref != 'refs/heads/main'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: proshop-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Frontend - Build, tag, and push docker image to Amazon ECR
        if: github.ref != 'refs/heads/main'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: proshop-frontend
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./frontend
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG





#there was syntax error : 


# name: proshop app Image CI

# on:
#   push:
#     branches:
#       - feature/**

# # required permissions by GitHub Actions for assuming AWS IAM role
# permissions:
#   id-token: write
#   contents: read

# env:
#   AWS_REGION: "us-east-1"
#   ENVIRONMENT_STAGE: ${{ github.ref == 'refs/heads/main' ? 'production' : (github.ref == 'refs/heads/staging' ? 'staging' : 'dev') }}

# jobs:
#   proshop-app-build-and-deploy:
#     environment: ${{ github.ref == 'refs/heads/main' ? 'production' : (github.ref == 'refs/heads/staging' ? 'staging' : 'dev') }}
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Branch
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: ${{ vars.IAM_ROLE }}
#           role-session-name: GitHubActionsCICDrole
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Backend - Build, tag, and push docker image to Amazon ECR
#         if: github.ref != 'refs/heads/main'
#         env:
#           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: proshop-backend
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#       - name: Frontend - Build, tag, and push docker image to Amazon ECR
#         if: github.ref != 'refs/heads/main'
#         env:
#           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: proshop-frontend
#           IMAGE_TAG: ${{ github.sha }}
#         working-directory: ./frontend
#         run: |
#           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
./frontend/Dockerfile
Contents of ./frontend/Dockerfile:
# Use an official Node.js image as the base image
FROM node:16-alpine

# Set the working directory in the container
WORKDIR /app

# Copy package.json and package-lock.json (if available)
COPY package*.json ./

# Install dependencies
RUN npm install && npm cache clean --force

# Copy the rest of the application code
COPY . .

# Build the frontend
RUN npm run build

# Expose the port on which your app will run
EXPOSE 3000

# Command to run the application
CMD ["npm", "start"]

./Dockerfile
Contents of ./Dockerfile:
FROM node:16

#Set Wokrdir and Copy Context
WORKDIR /app
COPY package*.json ./

#Install Package Dependency
RUN npm install --quiet && npm cache clean --force

#Copy Context To Docker Image
COPY . .

#Expose Image Port
EXPOSE 5000

#Start Backend Server
CMD ["npm", "run", "server"]

./helm-chart/Chart.yaml
Contents of ./helm-chart/Chart.yaml:
apiVersion: v2
name: Helm Chart
description: proshop app helm chart
type: application
version: 0.1.0
./helm-chart/values/frontend/staging-values.yaml
Contents of ./helm-chart/values/frontend/staging-values.yaml:
replicaCount: 1
port: 3000
servicePort: 3000
serviceProtocol: TCP
appName: proshop-frontend
hostName: shop-centos-staging.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-staging.com-tls
appNamespace: shop-app-staging
serviceAccount: default
awsSecrets:
  enabled: false
appConfig:
  envVars:
    - name: DANGEROUSLY_DISABLE_HOST_CHECK
      value: "true"
  secrets: []

./helm-chart/values/frontend/dev-values.yaml
Contents of ./helm-chart/values/frontend/dev-values.yaml:
replicaCount: 1
port: 3000
servicePort: 3000
serviceProtocol: TCP
appName: proshop-frontend
hostName: shop-centos-dev.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-dev.com-tls
appNamespace: shop-app-dev
serviceAccount: default
awsSecrets:
  enabled: false
appConfig:
  envVars:
    - name: DANGEROUSLY_DISABLE_HOST_CHECK
      value: "true"
  secrets: []

./helm-chart/values/frontend/prod-values.yaml
Contents of ./helm-chart/values/frontend/prod-values.yaml:
replicaCount: 1
port: 3000
servicePort: 3000
serviceProtocol: TCP
appName: proshop-frontend
hostName: shop-centos-production.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-production.com-tls
appNamespace: shop-app-production
serviceAccount: default
awsSecrets:
  enabled: false
appConfig:
  envVars:
    - name: DANGEROUSLY_DISABLE_HOST_CHECK
      value: "true"
  secrets: []

./helm-chart/values/backend/staging-values.yaml
Contents of ./helm-chart/values/backend/staging-values.yaml:
replicaCount: 1
port: 5000
servicePort: 5000
serviceProtocol: TCP
appName: proshop-backend
hostName: shop-centos-api-staging.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-staging.com-tls
appNamespace: shop-app-staging
serviceAccount: proshop-app-backend-sa
awsSecrets:
  enabled: true
  secretProviderClassName: "proshop-backend-aws-secrets"
  k8sSecretName: "proshop-db-credentials"
  awsSecretName: "mongo_db_secret"
  secretKeys:
    - key: "mongo_db_uri"
appConfig:
  envVars:
    - name: NODE_ENV
      value: "development"
  secrets:
    - name: MONGO_URI
      secretName: proshop-db-credentials
      key: "mongo_db_uri"

./helm-chart/values/backend/dev-values.yaml
Contents of ./helm-chart/values/backend/dev-values.yaml:
replicaCount: 1
port: 5000
servicePort: 5000
serviceProtocol: TCP
appName: proshop-backend
hostName: shop-centos-api-dev.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-dev.com-tls
appNamespace: shop-app-dev
serviceAccount: proshop-app-backend-sa
awsSecrets:
  enabled: true
  secretProviderClassName: "proshop-backend-aws-secrets"
  k8sSecretName: "proshop-db-credentials"
  awsSecretName: "mongo_db_secret"
  secretKeys:
    - key: "mongo_db_uri"
appConfig:
  envVars:
    - name: NODE_ENV
      value: "development"
  secrets:
    - name: MONGO_URI
      secretName: proshop-db-credentials
      key: "mongo_db_uri"

./helm-chart/values/backend/prod-values.yaml
Contents of ./helm-chart/values/backend/prod-values.yaml:
replicaCount: 1
port: 5000
servicePort: 5000
serviceProtocol: TCP
appName: proshop-backend
hostName: shop-centos-api-production.312centos.com
ingress:
  enabled: true
  tls:
    enabled: true
    secretName: 312centos-production.com-tls
appNamespace: shop-app-production
serviceAccount: proshop-app-backend-sa
awsSecrets:
  enabled: true
  secretProviderClassName: "proshop-backend-aws-secrets"
  k8sSecretName: "proshop-db-credentials"
  awsSecretName: "mongo_db_secret"
  secretKeys:
    - key: "mongo_db_uri"
appConfig:
  envVars:
    - name: NODE_ENV
      value: "production"
  secrets:
    - name: MONGO_URI
      secretName: proshop-db-credentials
      key: "mongo_db_uri"

./helm-chart/templates/deployment.yaml
Contents of ./helm-chart/templates/deployment.yaml:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}
  namespace: {{ .Values.appNamespace }}
  labels:
    app: {{ .Values.appName }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount}}
      containers:
      - name: {{ .Values.appName }}
        image: "{{ .Values.image.repo }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.port }}
        env:
        {{- range .Values.appConfig.envVars }}
        - name: {{ .name }}
          value: {{ .value | quote }}
        {{- end }}
        {{- range .Values.appConfig.secrets }}
        - name: {{ .name }}
          valueFrom:
            secretKeyRef:
              name: {{ .secretName }}
              key: {{ .key }}
        {{- end }}
        volumeMounts:
        {{- if .Values.awsSecrets.enabled }}
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
        {{- end }}
      volumes:
      {{- if .Values.awsSecrets.enabled }}
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: {{ .Values.awsSecrets.secretProviderClassName }}
      {{- end }}
./helm-chart/templates/ingress.yaml
Contents of ./helm-chart/templates/ingress.yaml:
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.appName }}-svc"
  namespace: {{ .Values.appNamespace }}
spec:
  selector:
    app: {{ .Values.appName }}
  ports:
    - protocol: {{ .Values.serviceProtocol }}
      port: {{ .Values.servicePort }}
      targetPort: {{ .Values.port }}
---
{{- if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Values.appName}}-ingress"
  namespace: {{ .Values.appNamespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: {{ .Values.hostName}}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Values.appName }}-svc"
            port:
              number: {{ .Values.servicePort }}
  ingressClassName: nginx
  {{- if .Values.ingress.tls.enabled }}
  tls:
  - hosts:
      - {{ .Values.hostName }}
    secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
{{- end }}
./helm-chart/templates/secret-provisioner.yaml
Contents of ./helm-chart/templates/secret-provisioner.yaml:
{{- if .Values.awsSecrets.enabled }}
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: {{ .Values.awsSecrets.secretProviderClassName }}
spec:
  provider: aws
  secretObjects:
    - secretName: {{ .Values.awsSecrets.k8sSecretName }}
      type: Opaque
      data:
      {{- range .Values.awsSecrets.secretKeys }}
      - objectName: "{{ .key }}-alias"
        key: {{ .key }}
      {{- end }}
  parameters:
    objects: |
      - objectName: "{{ .Values.awsSecrets.awsSecretName }}"
        objectType: "secretsmanager"
        jmesPath:
          {{- range .Values.awsSecrets.secretKeys }}
          - Path: "{{ .key }}"
            ObjectAlias: "{{ .key }}-alias"
          {{- end }}
{{- end }}
